{"meta":{"title":"TCPGNL","subtitle":"在历史的层林尽染中书写时代的年华!","description":"在历史的层林尽染中书写时代的年华!","author":"TCPGNL","url":"https://www.tcpgnl.com","root":"/"},"pages":[{"title":"关于我","date":"2020-04-03T14:27:43.000Z","updated":"2020-04-03T15:55:27.828Z","comments":true,"path":"about/index.html","permalink":"https://www.tcpgnl.com/about/index.html","excerpt":"","text":""},{"title":"归档","date":"2019-12-27T15:24:30.000Z","updated":"2020-04-03T15:50:25.888Z","comments":false,"path":"archive/index.html","permalink":"https://www.tcpgnl.com/archive/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-04-03T14:11:55.000Z","updated":"2020-04-03T15:55:56.348Z","comments":true,"path":"categories/index.html","permalink":"https://www.tcpgnl.com/categories/index.html","excerpt":"","text":""},{"title":"赞助","date":"2020-04-05T09:16:39.000Z","updated":"2020-04-05T14:58:09.143Z","comments":true,"path":"donate/index.html","permalink":"https://www.tcpgnl.com/donate/index.html","excerpt":"","text":"感谢亲们的赞助,正因为有你们的存在,才会鼓舞着我不断的探寻知识的本源. 赞助渠道一次性付款 支付宝(Alipay) 微信(WeChat Pay) QQ 循环付款 循环付款 代表着你对我的持久认同,谢谢你的认同与鼓励 Patreonhttps://www.patreon.com/tcpgnl 赞助名单 赞助人 赞助渠道 赞助留言 赞助金额 赞助时间 纯代码狗编辑来了 QQ 1.00 2020-04-05 17:49:00 *! 微信 0.01 2020-04-04 18:35:09"},{"title":"示例页面","date":"2019-12-25T03:42:15.000Z","updated":"2020-04-03T14:45:20.848Z","comments":false,"path":"sample-page/index.html","permalink":"https://www.tcpgnl.com/sample-page/index.html","excerpt":"","text":"这是示范页面。页面和博客文章不同，它的位置是固定的，通常会在站点导航栏显示。很多用户都创建一个“关于”页面，向访客介绍自己。例如： 欢迎！我白天是个邮递员，晚上就是个有抱负的演员。这是我的博客。我住在天朝的帝都，有条叫做 Jack 的狗。 … 或这个： XYZ Doohickey 公司成立于 1971 年，自从建立以来，我们一直向社会贡献着优秀 doohickies。我们的公司总部位于天朝魔都，有着超过两千名员工，对魔都政府税收有着巨大贡献。 而您，作为一个 WordPress 用户，我们建议您访问控制板，删除本页面，然后添加您自己的页面。祝您使用愉快！"},{"title":"我的好友","date":"2020-04-03T16:16:29.836Z","updated":"2020-04-03T16:16:29.836Z","comments":true,"path":"friends/index.html","permalink":"https://www.tcpgnl.com/friends/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-04-03T15:56:16.355Z","updated":"2020-04-03T15:56:16.355Z","comments":true,"path":"tags/index.html","permalink":"https://www.tcpgnl.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"宝塔面板搭建流程","slug":"install-bt","date":"2020-04-03T14:45:20.848Z","updated":"2020-04-05T09:04:39.041Z","comments":true,"path":"install-bt.html","link":"","permalink":"https://www.tcpgnl.com/install-bt.html","excerpt":"","text":"宝塔面板搭建流程 众所周知,宝塔面板可以减轻开发者搭建开发环境的痛苦和折磨,一键就可完成环境的搭建并且拥有一个完整的面板系统,因此,推荐宝塔面板或许会帮助开发者更快的配置环境 优点 快速配置环境 缺点 直到当下:2020 -4-1 宝塔面板仍然有很多未知的错误,如果不是你的问题,很有可能是宝塔的问题. 直至当下:2020-4-1 宝塔面板被强攻的次数有很多,推荐换端口,换账号密码 宝塔面板可以做什么 快速搭建网站(直接是上传网页到服务器和绑定域名以及宝塔提供一件安装脚本的网站程序(WordPress等)) 快速开启新的独立数据库 快速开启FTP客户端 较为容易的监控日志 较为简单的管理防火墙 较为简单的开启计划任务 所需资源 服务器一台 可以联网的计算机一个 shell软件一个(可有可无) 所需资源 bt.cn 流程第一步 格式化自己的服务器这个步骤比较简单,推荐将自己的系统重装为CentOS(官方推荐),为开发环境安装提供一个全新的系统 第二步 安装脚本我使用的开发脚本是(针对于CentOS) 1yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh 连接主机后(推荐putty/xshell),直接粘贴进上面的代码,按照开发流程进行执行 图示的地方输入y 安装速度很快,到最后会有 如下图的面板地址 用户名密码 注意放行相应服务器的端口(这个各个服务厂商都有自己的特色) 第三步 登录系统 安装环境经过上面的步骤面板安装完成了,这一步骤的目的是安装相应的环境,这里宝塔会弹出一键安装的地址不需要自己配置,直接点击左边的一键安装即可 我的服务器的配置(2020-4-1),具有时间局限性(此为宝塔推荐) 其中phpMyAdmin我不推荐安装,因为有数据库被down的是因为它而起的. 经过上述步骤,宝塔面板已经安装完成.","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.tcpgnl.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[]},{"title":"Springboot后端的JPA实现","slug":"springboot-jpa","date":"2020-04-02T16:19:36.000Z","updated":"2020-04-03T16:27:36.053Z","comments":true,"path":"springboot-jpa.html","link":"","permalink":"https://www.tcpgnl.com/springboot-jpa.html","excerpt":"","text":"Springboot后端的JPA实现 springboot后端开发有多种类,JPA实现可以少写很多的mapper文件,当然使用生成器也可以生成相应的文件,用生成器生成的情况下次再写,此次记录一下使用JPA的形势实现一下后端的项目 所需资源 代码编辑器idea 计算机一台 带有数据库的服务器(电脑)一台 数据库连接软件 推荐Navicat 优点明显加快开发速度,不用写mapper和mapper对应的dao减少了很多常规化的代码量(经常使用的),相对于其他的方式,显著加快了CRUD的速度. 开发步骤创建数据库新建数据库很简单,在此处不赘述,如果有不太清楚的话,推荐Google一下,实在不清楚的话可以留言评论. 数据库创建完成 创建表 编辑完成表后点击保存,输入表的名称 我的表的名称是user 填入表的数据(此处为实验程序) 致此 数据库创建完成 创建后端程序使用idea创建spring项目 选择spring启动器 填写项目信息 选择依赖此处选择 spring Web Mysql Driver 和spring Data JPA 选择项目的本地磁盘的位置 由此本地项目创建完成 下面才是重头戏 书写后端代码首先创建实体类创建pagkage名字为Entity,并且穿件User实体类 加入Entity注解,,并加入setter和getter方法,代码如下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758package com.tcpgnl.jpatest.Entity;import javax.persistence.Entity;import javax.persistence.Id;import javax.persistence.Table;@Entitypublic class User &#123; @Id private int id; public String getUsername() &#123; return username; &#125; public void setUsername(String username) &#123; this.username = username; &#125; private String username; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125; public String getWebsite() &#123; return website; &#125; public void setWebsite(String website) &#123; this.website = website; &#125; public String getPassword() &#123; return password; &#125; public void setPassword(String password) &#123; this.password = password; &#125; private String password; private int age; private String website;&#125; 创建Repository创建interface 继承JPARepository 方法 代码如下: 123456789package com.tcpgnl.jpatest.Repository;import com.tcpgnl.jpatest.Entity.User;import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.stereotype.Repository;@Repositorypublic interface UserRepository extends JpaRepository&lt;User,Integer&gt; &#123;&#125; 创建Controller12345678910111213141516171819202122package com.tcpgnl.jpatest.Controller;import com.tcpgnl.jpatest.Entity.User;import com.tcpgnl.jpatest.Repository.UserRepository;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import javax.annotation.Resource;import java.util.List;@RestController@RequestMapping(\"/user\")public class UserController &#123; @Resource private UserRepository userRepository; @GetMapping(\"/list\") public List&lt;User&gt; allUsers()&#123; return userRepository.findAll(); &#125; &#125; 修改application.properties修改自己的数据库的账号密码 1234spring.datasource.url=jdbc:mysql://localhost:3306/testtable?userSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8spring.datasource.username=rootspring.datasource.password=123456spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver 此时,代码已经完成 执行网址: http://localhost:8080/user/list 执行效果如下图: 演示结束","categories":[{"name":"Java","slug":"Java","permalink":"https://www.tcpgnl.com/categories/Java/"},{"name":"SpringBoot","slug":"Java/SpringBoot","permalink":"https://www.tcpgnl.com/categories/Java/SpringBoot/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.tcpgnl.com/tags/Java/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://www.tcpgnl.com/tags/SpringBoot/"},{"name":"Spring","slug":"Spring","permalink":"https://www.tcpgnl.com/tags/Spring/"},{"name":"JPA","slug":"JPA","permalink":"https://www.tcpgnl.com/tags/JPA/"}]},{"title":"闭关了闭关了 闭关一个月","slug":"2020-3-25","date":"2020-03-25T07:19:41.000Z","updated":"2020-04-03T16:25:20.508Z","comments":true,"path":"2020-3-25.html","link":"","permalink":"https://www.tcpgnl.com/2020-3-25.html","excerpt":"","text":"","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.tcpgnl.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[]},{"title":"2020321项目立项","slug":"2020321-e9-a1-b9-e7-9b-ae-e7-ab-8b-e9-a1-b9","date":"2020-03-20T16:12:41.000Z","updated":"2020-04-03T14:45:20.778Z","comments":true,"path":"2020321-e9-a1-b9-e7-9b-ae-e7-ab-8b-e9-a1-b9.html","link":"","permalink":"https://www.tcpgnl.com/2020321-e9-a1-b9-e7-9b-ae-e7-ab-8b-e9-a1-b9.html","excerpt":"","text":"","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.tcpgnl.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[]},{"title":"bilibili up主感想","slug":"bilibili-up-think","date":"2020-03-10T10:58:35.000Z","updated":"2020-04-03T16:51:38.453Z","comments":true,"path":"bilibili-up-think.html","link":"","permalink":"https://www.tcpgnl.com/bilibili-up-think.html","excerpt":"","text":"前言转眼间,我做bilibili的UP主已经32天了,有一些感想,在此记录. 感想其实最大的感想就是视频流是一个连续的整体,视频的内容要保证连续性,因此在录制视频的时候要求尽可能的连续,不然的话,后期剪辑的时候相当的耗时耗力,而且效果可能不是那么理想. 制作视频的流程选题当然我现在还没有涉及这一部分,当然也涉及了这一部分. 第一次做是兴趣,现在逐渐将方向转向技术开发,不知道以后会转向什么方向. 编排其实现在也没怎么做编排,现在做的都是一些的小项目,没有编排,当然没有编排的后果也是很严重,有时候不知道说啥,不知道怎么解释. 录制剪辑其他未完待续…","categories":[{"name":"感想","slug":"感想","permalink":"https://www.tcpgnl.com/categories/%E6%84%9F%E6%83%B3/"}],"tags":[]},{"title":"我理想中的公司是什么样子的?","slug":"my-dream-company","date":"2020-03-10T10:26:44.000Z","updated":"2020-04-03T15:05:32.635Z","comments":true,"path":"my-dream-company.html","link":"","permalink":"https://www.tcpgnl.com/my-dream-company.html","excerpt":"","text":"我梦想中的公司是什么样子的呢 以提高客户的生活品质为追求 以不打倒某一家公司为目标因为一旦树立标杆,就只为了目的性,而忽略公司的本质 可以为员工提供良好的学习环境 不以压榨员工的剩余价值为骄傲 可以参考员工的意见进行职位调动 合格且成熟的职位晋升渠道未完待续","categories":[{"name":"感想","slug":"感想","permalink":"https://www.tcpgnl.com/categories/%E6%84%9F%E6%83%B3/"}],"tags":[]},{"title":"Spring Guides Spring 官方指南实现","slug":"spring-guides","date":"2020-03-09T15:44:22.000Z","updated":"2020-04-03T15:04:04.046Z","comments":true,"path":"spring-guides.html","link":"","permalink":"https://www.tcpgnl.com/spring-guides.html","excerpt":"","text":"Spring-Guides 这是Spring官方文档的实现 起因为了强化spring的学习和完成以前的spring项目,从3月10号起,每天做两个spring官方基础的指南,或者一个Topical Guides或者一个Tutorialshttps://spring.io/guides/#getting-started-guides 项目的形式项目采用GitHub+bilibili的形式GitHub地址: https://github.com/tcpgnlbilibili地址: https://space.bilibili.com/472620361 时间安排第一部分 Getting Started Guides (15-30分钟) 序号 题目 GitHub地址 bilibili地址 预期完成时间 最终完成时间 1 Building a RESTful Web Service 3-10 2 Scheduling Tasks 3-10 3 Consuming a RESTful Web Service 3-11 4 Building Java Projects with Gradle 3-11 5 Building Java Projects with Maven 3-12 6 Accessing Relational Data using JDBC with Spring 3-12 7 Uploading Files 3-13 8 Authenticating a User with LDAP 3-13 9 Messaging with Redis 3-14 10 Messaging with RabbitMQ 3-14 11 Accessing Data with Neo4j 3-15 12 Validating Form Input 3-15 13 Building a RESTful Web Service with Spring Boot Actuator 3-16 14 Messaging with JMS 3-16 15 Creating a Batch Service 3-17 16 Securing a Web Application 3-17 17 Building a Hypermedia-Driven RESTful Web Service 3-18 18 Accessing Data in Pivotal GemFire 3-18 19 Integrating Data 3-19 20 Caching Data with Pivotal GemFire 3-19 21 Managing Transactions 3-20 22 Accessing Data with JPA 3-20 23 Accessing Data with MongoDB 3-21 24 Serving Web Content with Spring MVC 3-21 25 Converting a Spring Boot JAR Application to a WAR 3-22 26 Creating Asynchronous Methods 3-22 27 Handling Form Submission 3-23 28 Building an Application with Spring Boot 3-23 29 Using WebSocket to build an interactive web application 3-24 30 Working a Getting Started guide with STS 3-24 31 Consuming a RESTful Web Service with AngularJS 3-25 32 Consuming a RESTful Web Service with rest.js 3-25 33 Consuming a RESTful Web Service with jQuery 3-26 34 Enabling Cross Origin Requests for a RESTful Web Service 3-26 35 Consuming a SOAP web service 3-27 36 Accessing JPA Data with REST 3-27 37 Accessing Neo4j Data with REST 3-28 38 Accessing MongoDB Data with REST 3-28 39 Accessing Data in Pivotal GemFire with REST 3-29 40 Producing a SOAP web service 3-29 41 Caching Data with Spring 3-30 42 Deploying to Cloud Foundry from STS 3-30 43 Spring Boot with Docker 3-31 44 Working a Getting Started guide with IntelliJ IDEA 3-31 45 Creating CRUD UI with Vaadin 4-1 46 Service Registration and Discovery 4-1 47 Centralized Configuration 4-2 48 Routing and Filtering 4-2 49 Circuit Breaker 4-3 50 Client Side Load Balancing with Ribbon and Spring Cloud 4-3 51 Testing the Web Layer 4-4 52 Accessing data with MySQL 4-4 53 Creating a Multi Module Project 4-5 54 Creating API Documentation with Restdocs 4-5 55 Messaging with Google Cloud Pub/Sub 4-6 56 Building a Reactive RESTful Web Service 4-6 57 Consumer Driven Contracts 4-7 58 Accessing Vault 4-7 59 Vault Configuration 4-8 60 Accessing Data Reactively with Redis 4-8 61 Deploying a Spring Boot app to Azure 4-9 62 Building a Gateway 4-9 63 Client-Side Load-Balancing with Spring Cloud LoadBalancer 4-10 64 Spring Cloud Stream 4-10 65 Spring Cloud Data Flow 4-11 66 Spring Cloud Task 4-11 67 Spring Boot Kubernetes 4-12 68 Accessing data with R2DBC 4-12 69 Spring Cloud Circuit Breaker Guide 4-13 第二部分 Topical Guides (&lt;60分钟) 序号 题目 GitHub地址 bilibili地址 预期完成时间 最终完成时间 1 Spring Security Architecture 4-13 2 Spring Boot Docker 4-14 第三部分 Tutorials (2-3小时) 序号 题目 GitHub地址 bilibili地址 预期完成时间 最终完成时间 1 Building REST services with Spring 4-15 2 Spring Security and Angular 4-16 3 React.js and Spring Data REST 4-17 4 Spring Boot and OAuth2 4-18 5 Building web applications with Spring Boot and Kotlin 4-19","categories":[{"name":"Java","slug":"Java","permalink":"https://www.tcpgnl.com/categories/Java/"}],"tags":[{"name":"Spring","slug":"Spring","permalink":"https://www.tcpgnl.com/tags/Spring/"}]},{"title":"nodejs centos安装教程","slug":"nodejs-install","date":"2020-03-09T03:40:51.000Z","updated":"2020-04-03T15:03:37.900Z","comments":true,"path":"nodejs-install.html","link":"","permalink":"https://www.tcpgnl.com/nodejs-install.html","excerpt":"","text":"前因express 真轻量,用它做API应该比较方便,比springboot应该轻量的多,javascript 咱也会一部分,一次你记录下nodejs在centos安装教程,为啥选centos呢,因为它稳. 还有windows的shell交互式真的差… 安装教程首先连接服务器这个easy 下载文件直接wget 当前是我的版本(2020-3-9) 1wget https://nodejs.org/dist/v12.16.1/node-v12.16.1-linux-x64.tar.xz 解压文件一种直接的方法直接解压到/sur/local 1sudo tar --strip-components 1 -xf node-v12.16.1-linux-x64.tar.xz -C /usr/local 测试1node -v 缺点删除的时候不好删除毕竟直接放在usr/local文件夹了 解决方法 以后补充.涉及知识 [部分shell指令]","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.tcpgnl.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[]},{"title":"为什么多标准不好? 谁该立标准","slug":"why-more-standard-is-harmful","date":"2020-03-08T06:43:24.000Z","updated":"2020-04-03T16:27:48.078Z","comments":true,"path":"why-more-standard-is-harmful.html","link":"","permalink":"https://www.tcpgnl.com/why-more-standard-is-harmful.html","excerpt":"","text":"前因有很多的公司喜欢立标准,让行业中的存在很多很多的标准,使得什么样子的服务器配合什么样子的配套机型,但是这样好吗? 回答当然不好,多标准困扰最大的就是普通人,或者说是消费者,消费者不应该关系,自己购买的产品,需要配什么样子的其余产品,哪个质量好就应该用哪个,不会因为标准的问题造成无法使用的问题,而且售后也是一个很大的问题,如果一个厂家停产了某个事物,这样他的消费者就无法得到后续的支持,这对于消费者来说后果可想而知.那对厂商来说 好吗?? 当然短期来看,某个厂商有优点,比如服务器好,进行捆绑销售,会提升公司的利润,但是这些是短期的,如果一个企业根据成本测算,觉得生产某个商品已经是赔本了,那它距离停产此商品就只是时间的问题了. 统一单边准的优点在哪?多标准的缺点,可以看一下推荐阅读的第一个,优点是什么呢?于用户来说: 单标准可以减少开销,选择最优的商家的最优的产品,保证自己的业务的稳定性,这是一个百利而无一害的事情.于企业来说: 减少成本消耗,不必为了创建标准而创建,不必为了保证用户的需要而赔本制造某件东西,这对企业也是非常有利的. 问题来了? 谁改创建标准,谁改管理标准谁改创建标准呢?当然,毫无疑问,每家企业都有创建标准的权利,谁都可以创建标准. 问题来了 谁改管理标准呢?如果企业管理标准的话,那和没建立单标准是一样的,各自管理各自的,无法相互沟通和提升,这样,单标准政策就是空话.我认为,应该有基金会来创建标准,互联网时代使得一切成为可能 W3C基金会,使得互联网标准化,收益的人很多很多,HTTP3.0 Google提出,难道提出者没有收益吗? 当然收益了呀,名扬四海,Google作为浏览器的龙头,无数的浏览器都是使用的Google开源的浏览器内核,一边推广名声,一边或者利益,也只要这种方式可以让企业走的更远,让企业做的更高. 基金会应该做到什么呢科学的管理基金,积极的吸收新标准,广泛的推广技术. 真的可能什么都可以统一标准吗?当然不全是? 比如说某些武器,但是??? 为什么要研究武器呢??? 是为了自我守卫,还是为了打仗,为什么要打仗呢??真正退役标准不无可能,但是需要全人类的共同努力. 用一句话结束我的文章FOR THE GLORY OF HUMAN! 推荐阅读 新加坡总理李显龙华语群众大会演讲完整视频（National Day Rally 2019 - Chinese)","categories":[{"name":"感想","slug":"感想","permalink":"https://www.tcpgnl.com/categories/%E6%84%9F%E6%83%B3/"}],"tags":[]},{"title":"从零到一配置软件环境","slug":"easy-to-code","date":"2020-03-07T02:58:09.000Z","updated":"2020-04-03T15:02:48.640Z","comments":true,"path":"easy-to-code.html","link":"","permalink":"https://www.tcpgnl.com/easy-to-code.html","excerpt":"","text":"主要内容搭建开发环境的难度 大家可想而知,电脑格式化后在重作系统的遭遇,我想每个开发人员都有所经历,那不妨,找一中好的方式配置环境,方便短时开发,注意是短时开发. 软件推荐 写在前面无论是谁总结的文章,都不会比官方文档权威,推荐如何想学习使用相关的命令,以官方文档为准.(少数官方文档除外) Docker官方网站:docker.com毫无疑问docker是最优秀的容器软件之一,拉取创建方便,易于使用,简单易行等优点深受软件开发者的热爱. docker 基本指令 指令 示例 解释 docker -h docker -h docker帮助指令,查找所有的命令行 docker pull IMAGE docker pull centos 搜索centos镜像并下载 docker images docker images 列出本地的镜像 docker search KEYWORDS docker search centos 查找网上的centos镜像 docker rmi [OPTIONS] IMAGEID docker rmi 44d36d2c2374 删除我的电脑上的redis的文件 docker ps docker ps 列出所有运行的容器 参数 -a 所有的容器 -f 过滤 -q 显示容器的id docker run [OPTIONS] IMAGE docker run centos 运行docker镜像,如果本地没有,则直接向网络中下载 运行 -p 端口映射 多端口映射-p 1234-1236:1234-1236/tcp docker version docker version 查看docker的版本信息 docker info docker info 显示docker的系统信息 包括CPU 内存容器个数等 docker kill CONTAINERID docker kill 7699cb****a7 删除本地的redis容器 docker start / stop / restart CONTAINERID docker start / stop / restart 7699cb****a7 启动 停止 重启 容器 docker build [OPTIONS] PATH docker build -t nginx:v3 . 当前构建镜像(当前目录Dockerfile文件) 参数 -t 打标签 docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG] docker tag 0e5574283393 fedora/httpd:version1.0 为镜像 打标签 # bitnami 官方网站: https://bitnami.com/ ## 使用方法 这个比较简单,直接下载安装即可,不得不多这个做的非常好 比如WordPress 有cloud 版本 容器版本 PC/虚拟机版本 参考文档 https://docs.docker.com/ https://www.jianshu.com/p/a23539a519b7","categories":[{"name":"Docker","slug":"Docker","permalink":"https://www.tcpgnl.com/categories/Docker/"}],"tags":[{"name":"Bitnami","slug":"Bitnami","permalink":"https://www.tcpgnl.com/tags/Bitnami/"},{"name":"Docker","slug":"Docker","permalink":"https://www.tcpgnl.com/tags/Docker/"}]},{"title":"如何写文章不吸引眼球,而且好?","slug":"how-to-write-big-blog","date":"2020-03-06T04:09:19.000Z","updated":"2020-04-03T15:02:26.026Z","comments":true,"path":"how-to-write-big-blog.html","link":"","permalink":"https://www.tcpgnl.com/how-to-write-big-blog.html","excerpt":"","text":"前因 近期在CSDN上看的文章 首页文章大都是 惊了,硬核,这些年,其实很简单, !!! 5分钟带你学会** 10分钟搞定** 老生常谈**有所感悟,在此记录一下,以供未来观测 文章题目一定要震惊吗?当代个人独立博客和在各个地方写博客的作者都或多或少的想让其他人发现自己,当然最多的做独立博客的人都是想记录自己的心得,经验和感想,甚少是为了爆文而爆文,所以我比较喜欢独立博客一点,毕竟没有那么多功利性在里面,独立博客的文章虽然不一定都有深度,但是很多都有作者的本身之谈,有深度的文章比非独立博客要多的多,文章不一定要做震惊 惊了 震惊问有好处吗毫无疑问,有的,没有的话也不会有那么多人或者工具写爆文,所以有啥好处呢?当代社会整块时间越来越少, 零碎的时间越来越多,与此同时,社会人员(其实不止社会人员)越来越焦虑,担心什么流行的事物自己不知道,自己赶不上社会的潮流,因此震惊文的流行也水到渠成.而且,与此同时,一篇文章的流行与否,CSDN等软件评级,微信公众号的接广告的等级,也是靠浏览量的计算,因此爆文就开始流行. 震惊文有坏处吗?毫无疑问,坏处太多了,浪费了多数人的时间,看着并未有任何营养的文章,形成了正反馈,导致越来越多的烂文章,一个好的社区或者一个大的环境都会受到污染,其坏处之大难以估计. 到了说是不是一定要震惊文了文章题目不一定要震惊,也可以写个好文章,那会不会吸引人,或者说能不能吸引人呢??能啊 当然可以啦,有很多的例子啊,比如耗子叔(陈皓)的coolshell,几乎篇篇文章经典,深度突出,让人有如获至宝的欣喜,读者主要进去一次,轻则把网址送到收藏夹第一个,重者(你连coolshell,耗子叔都没听说过,来来来 我给你网址,你看看,巨棒),这种引流的效果要比其他的引流的效果好的多,对作者的回流率和新入率都比较高,这种效果要好的多. 为什么要做独立博客作为独立博客,可以有自己的博客形式,寻找甚至修改自己喜欢的模板,自由的表达自己的项目,不会被平台所限制,有自己的创意与思考,这才是独立博客的本质. 我有什么比较推荐的独立博客 CoolShell还有的我友链中的博客都很推荐 我有什么推荐的论坛 hacker news https://medium.com/ Qiita","categories":[{"name":"感想","slug":"感想","permalink":"https://www.tcpgnl.com/categories/%E6%84%9F%E6%83%B3/"}],"tags":[]},{"title":"各种博客软件分析及初次尝试jekyll","slug":"try-jekyll","date":"2020-03-04T01:04:56.000Z","updated":"2020-04-03T15:02:00.354Z","comments":true,"path":"try-jekyll.html","link":"","permalink":"https://www.tcpgnl.com/try-jekyll.html","excerpt":"","text":"前因 最近发现自己需要一个导航主题,来查看自己的导航页面,因此看上了webstack导航主题,因为webstack主题有jekyll的样式,采用这种样式不用自己搭建服务器,不耗费资源就可以有一个自己的的导航主题,且以后可能博客也会静态化,因此采用jekyll也可能是一个好的选择. jekyll 优点与其先说jekyll 优点我觉得先说其他软件的缺点,可能更加的明确 WordPress有后台 PHP后台 我现在用的博客程序https://wordpress.org/ 优点 搭建简单 有很多非常优秀的主题 有很多优秀的插件 持续更新,安全性有保证 个人电脑不用下载任何应用,可在线编辑 社区资源十分充足缺点 太臃肿,耗费过多服务器的资源 如果用国外服务器,国内访问后台慢的很,(因为作为独立博客,我的初心就是 记录下文字,记录下感悟,不想被速度打断思路) 不能自动保存,差评typecho此博客软件同为有后台的软件,PHP 后台都可以在线编辑,以前使用过网址 https://typecho.org/优点 搭建简单 有一些优秀的主题 有一些优秀的插件 个人电脑不用下载任何应用,可在线编辑缺点 已经暂停更新,安全性无法保证,也已经出过安全性的问题 如果用国外服务器,国内访问后台慢的很,(因为作为独立博客,我的初心就是 记录下文字,记录下感悟,不想被速度打断思路) 单级分类,无法把条例展示清晰(对于新入门者而言,毕竟高手都会自己分类)z-blog同为有后台软件,PHP后台 以前使用过网址: https://www.zblogcn.com/优点 搭建简单 有一些优秀的主题 有一些优秀的插件 个人电脑不用下载任何应用,可在线编辑缺点 收费主题过于多,对新手(只写博客,不熟悉PHP和前端的人员)不友好 收费插件过于多,对新手(只写博客,不熟悉PHP和前端的人员)不友好 如果用国外服务器,国内访问后台慢的很,(因为作为独立博客,我的初心就是 记录下文字,记录下感悟,不想被速度打断思路) 好像更新的比较慢,已经爆出了严重的漏洞ghost有后台的软件 NodeJs后台 以前使用过 简洁风网址:https://ghost.org/优点 多数主题接简洁风 速度快 搭建简单 有很多优秀的主题缺点 单级目录 如果用国外服务器,国内访问后台慢的很,(因为作为独立博客,我的初心就是 记录下文字,记录下感悟,不想被速度打断思路)hexo无后台(也可以安装hexo-admin) NodeJs 以前使用过网址: https://hexo.io/优点 静态页面 有很多优秀的主题 有很多优秀的插件 持续更新 主题作者多 可以不使用服务器缺点 移动不方便,得时刻保证源文件 单级目录 编译速度慢 git上传的时候是真的慢 hugo无后台,Go语言,以前没有使用过 我记得好像没有插件 优点 静态页面 有很多优秀的主题 持续更新 主题作者多 可以不使用服务器 编译速度快缺点 移动不方便,得时刻保证源文件 单级目录 git上传的时候是真的慢jekyll无后台,但是可以直接保存文件到GitHub,环境需要自己电脑中安装ruby 打算使用优点 GitHub 负责编译 有很多优秀的主题 主题作者多 可以不使用服务器 缺点 git上传慢 收录问题 需要计算机安装ruby一套东西 直接把md放在GitHub,原始文档容易被盗搭建教程 https://www.netlify.com/blog/2015/10/28/a-step-by-step-guide-jekyll-3.0-on-netlify/ 安装流程安装ruby和msys2因为自己安装的时候没有截图,因此这方面的我推荐一篇其他作者的一篇文章网址如下:https://blog.walterlv.com/post/setup-jekyll-in-windows.html去安装ruby和MSYS2下载网址: https://rubyinstaller.org/downloads/注意: 我安装的时候MSYS的源有些东西受近地源的大小显示无法实现,推荐使用代理进行全局下载,以保证下载的完整性. 安装kekyll 和bundler首先换源换源网址:https://gems.ruby-china.com/我当时用的 1234$ gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/$ gem sources -lhttps://gems.ruby-china.com# 确保只有 gems.ruby-china.com 开始安装 jekyll bundler 1gem install jekyll bundler bundler 换源1$ bundle config mirror.https://rubygems.org https://gems.ruby-china.com 在自己下载的项目安装依赖1bundle install 启动jekyll1jekyll serve 出现错误 in check_for_activated_spec!&#39;: You have already activated public_suffix 4.0.3, but your Gemfile requires public_suffix 4.0.1. Prependingbundle exec` to your command may solve this. (Gem::LoadError) 解决方案 1bundle update 运行服务1jekyll serve 我这里出现了错误 201:in `bind’: Permission denied - bind(2) for 127.0.0.1:4000 (Errno::EACCES)这个错误是因为电脑的端口被占用了 使用netstat -an 可以查看端口占用情况 解决方案在_config.yml添加port: 4001 严格控制空格 1jekyll serve --trace 启动成功 我想要的主题是什么样子的 主题美观且直观 左右分栏 有顶部导航 有尾部导航 主题要大一些(不要限制到1200px) 有目录查看(使得结构清晰) 有评论框(最好可以使用自建的 当然diqus也可以) 有about界面 有link界面 有project界面 速度要快(静态做好) 书写起来要简单 最好多端同步 主题参考 http://moedog.org/ 的kratos-pjax https://molunerfinn.com/hexo-theme-melody-doc/ 樱花庄的白猫 https://2heng.xin/ Sakura主题","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.tcpgnl.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"博客","slug":"博客","permalink":"https://www.tcpgnl.com/tags/%E5%8D%9A%E5%AE%A2/"}]},{"title":"spring security 放行指定网页API","slug":"spring-security-liberate-api","date":"2020-03-03T05:32:16.000Z","updated":"2020-04-03T16:27:16.881Z","comments":true,"path":"spring-security-liberate-api.html","link":"","permalink":"https://www.tcpgnl.com/spring-security-liberate-api.html","excerpt":"","text":"前言使用spring security 进行权限管理不得不说是真的很好用,对用户的登录状态的检测和对用户的操作进行控制都是很好的模块. 问题提出既然是作为权限控制的,那么对于登录用户和非登录用户的区别就是很明显的,什么操作用户在未登录的时候可以做(注册 登录 或者京东的搜索查看),什么操作用户在登录的时候才可以做(对个人的数据进行操作,淘宝的搜索). 那如何解决呢spring security 默认对所有的操作都需要登录用户的权限才可以做,因此,问题的重点转化为了如何解决非登录用户的访问问题. 定义重写方法新建Securitycofig.java文件 继承WebSecurityConfigurerAdapter方法在其中重写configure文件 1234@Override public void configure(WebSecurity web) throws Exception &#123; web.ignoring().antMatchers(\"/login\",\"/css/**\",\"/js/**\",\"/index.html\",\"/img/**\",\"/fonts/**\",\"/favicon.ico\",\"/register/**\",\"/register/\"); &#125; 如上面所示我们就可以对login register接口和一些默认的静态文件进行放行 对源代码进行解读1public org.springframework.security.config.annotation.web.builders.WebSecurity.IgnoredRequestConfigurer ignoring() &#123; /* compiled code */ &#125; 1public C antMatchers(java.lang.String... antPatterns) &#123; /* compiled code */ &#125; 我们惊奇的发现 里面没有对任何文件进行放行???(存疑且肯定)","categories":[{"name":"Java","slug":"Java","permalink":"https://www.tcpgnl.com/categories/Java/"},{"name":"SpringBoot","slug":"Java/SpringBoot","permalink":"https://www.tcpgnl.com/categories/Java/SpringBoot/"},{"name":"未分类","slug":"Java/SpringBoot/未分类","permalink":"https://www.tcpgnl.com/categories/Java/SpringBoot/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.tcpgnl.com/tags/Java/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://www.tcpgnl.com/tags/SpringBoot/"}]},{"title":"从PWA,小程序看未来发展方向","slug":"from-pwa-forward","date":"2020-03-02T10:04:38.000Z","updated":"2020-04-03T15:01:12.044Z","comments":true,"path":"from-pwa-forward.html","link":"","permalink":"https://www.tcpgnl.com/from-pwa-forward.html","excerpt":"","text":"最近陆陆续续的发现很多很多的网站开始使用PWA(Progressive Web App)技术,联想到play store 的(Instant Apps)微信小程序,QQ小程序,支付宝小程序,百度程序等,观察未来发展的方向 介绍(摘录自维基百科)在2007年推出iPhone时，史蒂夫·乔布斯（Steve Jobs）宣布，使用AJAX架构以HTML5开发的Web应用程序将成为iPhone应用程序的标准格式。无需软件开发工具包（SDK），并且这些应用程序将通过Safari浏览器引擎完全集成到设备中。[4]此模型后来改为App Store，以防止越狱和缓解沮丧的开发人员。[5] 2007年10月，乔布斯宣布第二年将发布一个SDK。[4] 结果，尽管Apple继续支持Web应用程序，但绝大多数iOS应用程序都转向了App Store。 从2010年代初开始，动态网页允许使用网络技术来创建交互式Web应用程序。自适应的网页设计以及它提供的屏幕尺寸灵活性，使PWA开发更易于访问。对HTML，CSS和JavaScript的不断增强使Web应用程序可以合并更高级别的交互性，从而使类似本地的体验可以在网站上以及因此在PWA上实现。[6] Firefox 于2013年发布了Firefox OS。该操作系统旨在成为一款开放源代码 操作系统，用于在移动设备上以本地应用程序的形式运行Web应用程序，并以其HTML5界面构建了Gaia。Firefox OS的开发于2016年结束。 2015年，设计师Frances Berriman和Google Chrome工程师Alex Russell创造了“渐进式Web应用程序”一词[7]，以描述利用现代浏览器支持的新功能的应用程序，包括服务工作者和Web应用程序清单，这些功能可让用户升级Web应用程序到本机操作系统（OS）中的渐进式Web应用程序。然后，Google大力推动了Android的PWA开发。[8] [9]随着Apple在2017年引入服务人员对Safari的支持，[8]现在在两个最常用的移动操作系统Android和iOS上支持PWA。 到2019年，桌面浏览器Microsoft Edge [10]（在Windows上）和Google Chrome [11]（在Windows，macOS，Chrome OS和Linux上）上都可以使用PWA 2016 微信小程序发布而后其他小程序相继出现(支付宝 百度 等小程序) 优点 PWA 占用的空间更少 不需要太大的网络带宽，甚至可以在 2G 网络上工作 可以脱机工作 不需要对应用进行更新 降低开发成本 更好的性能 更好的体验 无论是从开发者来看(减少开发成本)(类似于响应式的网页开发框架),还是从不想装太多app(app臃肿或者非Google play store的应用良莠不齐且应用权限问题严重),Instant Apps都将成为一种新的适应时代的产物. 有何借鉴 减轻用户的手机 电脑负担,响应式页面 网页布局要清晰 网页服务对象要明确(即用户单一化处理) 对企业产生的问题 如何保证用户的月流量(当然作为内容的提供方,没有好的内容,自然无法获取好的用户群) 请问你看好吗?看好PWA吗答: 看好PWA可以整合其他的系统,减轻开发人员的进程. 看好**小程序吗答: 用户量的多少决定小程序可以走多远,和厂商联合的多少决定开发者的支持程度,快应用不得不说在未来可能会有前途,但是否可以走远不得而知.对了2020年了 统一推送联盟还好吗? (: 遗留待解决的问题这种PWA的形式的应用大大减轻了用户的负载,使得用户可以便捷的使用各个应用,待解决的问题其实也已经不是问题,PWA的原生支持非常好,提示也是相当的便捷,相比electron的每次都需要有一个浏览器的内核,已经是很优秀了,浏览器的包活率也非常非常好. 参考 https://lavas-project.github.io/pwa-book/chapter06.html https://web.dev/progressive-web-apps","categories":[{"name":"感想","slug":"感想","permalink":"https://www.tcpgnl.com/categories/%E6%84%9F%E6%83%B3/"}],"tags":[]},{"title":"将软件源修改为国内镜像","slug":"change-mirror","date":"2020-02-25T09:09:18.000Z","updated":"2020-04-03T16:25:31.343Z","comments":true,"path":"change-mirror.html","link":"","permalink":"https://www.tcpgnl.com/change-mirror.html","excerpt":"","text":"因为国内的软件的加载有很多的问题, 因此写下这一篇文章集中收集修改镜像的问题,为日后修改镜像做整理. maven镜像修改修改位置在用户目录(C:\\Users&lt;!–￼5–&gt;)的.m2目录新建setting.xml 阿里云镜像12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\"&gt; &lt;localRepository/&gt; &lt;interactiveMode/&gt; &lt;usePluginRegistry/&gt; &lt;offline/&gt; &lt;pluginGroups/&gt; &lt;servers/&gt; &lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;aliyunmaven&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;阿里云公共仓库&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;aliyunmaven&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;阿里云谷歌仓库&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/repository/google&lt;/url&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;aliyunmaven&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;阿里云阿帕奇仓库&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/repository/apache-snapshots&lt;/url&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;aliyunmaven&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;阿里云spring仓库&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/repository/spring&lt;/url&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;aliyunmaven&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;阿里云spring插件仓库&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/repository/spring-plugin&lt;/url&gt; &lt;/mirror&gt; &lt;/mirrors&gt; &lt;proxies/&gt; &lt;profiles/&gt; &lt;activeProfiles/&gt;&lt;/settings&gt; npm临时使用1npm --registry https://registry.npm.taobao.org install express 持续使用1234567891011121314151617181920//设置npm config set registry https://registry.npm.taobao.org// 查看当前源npm config get registry```` # Ruby源## Gem 镜像gem使用以下命令替换 gems 默认源# 添加 TUNA 源并移除默认源```bashgem sources --add https://mirrors.tuna.tsinghua.edu.cn/rubygems/ --remove https://rubygems.org/# 列出已有源gem sources -l# 应该只有 TUNA 一个 或者，编辑 ~/.gemrc，将 https://mirrors.tuna.tsinghua.edu.cn/rubygems/ 加到 sources 字段。 bundler使用以下命令替换 bundler 默认源 bash bundle config mirror.https://rubygems.org https://mirrors.tuna.tsinghua.edu.cn/rubygems 官方文档： http://bundler.io/v1.16/man/bundle-config.1.html#MIRRORS-OF-GEM-SOURCES Ruby china源1234$ gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/$ gem sources -lhttps://gems.ruby-china.com确保只有 gems.ruby-china.com 其他问题1234567891011121314151617181920212223如果你使用 Gemfile 和 Bundler (例如：Rails 项目)你可以用 Bundler 的 Gem 源代码镜像命令。$ bundle config mirror.https://rubygems.org https://gems.ruby-china.com这样你不用改你的 Gemfile 的 source。source 'https://rubygems.org/'gem 'rails', '4.2.5'...SSL 证书错误正常情况下，你是不会遇到 SSL 证书错误的，除非你的 Ruby 安装方式不正确。如果遇到 SSL 证书问题，你又无法解决，请修改 ~/.gemrc 文件，增加 ssl_verify_mode: 0 配置，以便于 RubyGems 可以忽略 SSL 证书错误。---:sources:- https://gems.ruby-china.com:ssl_verify_mode: 0如果你在意 Gem 下载的安全问题，请正确安装 Ruby、OpenSSL，建议部署 Linux 服务器的时候采用 这个 RVM 安装脚本 的方式安装 Ruby。其他说明Bundler::GemspecError: Could not read gem at /home/xxx/.rvm/gems/ruby-2.1.8/cache/rugged-0.23.3.gem. It may be corrupted.，这类错误是网络原因下载到了坏掉的文件到本地，请直接删除那个文件。请珍惜社区资源，勿基于本镜像做二次镜像网站，我们会定期检查 CDN 请求量统计，单日请求量过大（流量超过 20 G） 的 IP 将会被永久屏蔽。 镜像中心腾讯镜像中心https://cloud.tencent.com/document/product/213/8623 阿里云镜像中心https://developer.aliyun.com/mirror/ 清华开源https://mirrors.tuna.tsinghua.edu.cn/","categories":[{"name":"索引","slug":"索引","permalink":"https://www.tcpgnl.com/categories/%E7%B4%A2%E5%BC%95/"}],"tags":[]},{"title":"docker镜像修改","slug":"docker-mirrors","date":"2020-02-24T08:56:15.000Z","updated":"2020-04-03T15:00:15.205Z","comments":true,"path":"docker-mirrors.html","link":"","permalink":"https://www.tcpgnl.com/docker-mirrors.html","excerpt":"","text":"问题: docker 国内下载速度慢,难以拉取镜像,因此采用中国的镜像进行替换,加快国内的镜像拉取速度. 打开docker设置 选择设置 Docker Engine 设置选择第三个 Docker Engine 找到设置处填入设置信息 信息如下123456789&#123; \"registry-mirrors\": [ \"https://dockerhub.azk8s.cn\", \"https://hub-mirror.c.163.com\" ], \"insecure-registries\": [], \"debug\": true, \"experimental\": false&#125; 这两个镜像的地址不用申请,可以直接使用,为其点赞.","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.tcpgnl.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[]},{"title":"微人事部署","slug":"vhr-build","date":"2020-02-16T14:44:47.000Z","updated":"2020-04-03T16:27:46.056Z","comments":true,"path":"vhr-build.html","link":"","permalink":"https://www.tcpgnl.com/vhr-build.html","excerpt":"","text":"起因最近学校开启了软件综合实践课程(网课),我发现同学们部署有些问题,于是乎,写了怎么一篇文章,进行部署教程,同时也加深对springboot和docker部署的熟悉程度. 部署教程下载代码网址:项目地址 直接 解压到指定的文件夹 打开idea 自动下载依赖这一步骤直接idea直接运行即可 不需要手动操作 配置mysql推荐使用自己服务器上的数据库或者bitnami的数据库熟悉docker Windows持久化的也可以直接使用windows上的数据库(不推荐) 安装dockerdocker 配置 rabbitmq1docker run -d -p 5672:5672 -p 15672:15672 --name rabbitmq rabbitmq:management docker 配置 redis1docker run -d --name myredis -p 6379:6379 redis --requirepass \"123\" 运行项目,测试结果修改为 修改为 网址 结语主要设计idea 参考网址 segementfault docker","categories":[{"name":"Docker","slug":"Docker","permalink":"https://www.tcpgnl.com/categories/Docker/"},{"name":"Java","slug":"Docker/Java","permalink":"https://www.tcpgnl.com/categories/Docker/Java/"},{"name":"SpringBoot","slug":"Docker/Java/SpringBoot","permalink":"https://www.tcpgnl.com/categories/Docker/Java/SpringBoot/"}],"tags":[{"name":"Docker,Java,SpringBoot","slug":"Docker-Java-SpringBoot","permalink":"https://www.tcpgnl.com/tags/Docker-Java-SpringBoot/"}]},{"title":"curl学习笔记","slug":"curl-note","date":"2020-01-05T05:53:17.000Z","updated":"2020-04-03T14:59:26.663Z","comments":true,"path":"curl-note.html","link":"","permalink":"https://www.tcpgnl.com/curl-note.html","excerpt":"","text":"这个是GitHub实践的读书笔记 curl的学习cURL适合发起一次性请求 安装1yum install curl 发起第一次请求1curl https://api.github.com 显示结果 12345678910111213141516171819202122232425262728293031323334&#123; \"current_user_url\": \"https://api.github.com/user\", \"current_user_authorizations_html_url\": \"https://github.com/settings/connections/applications&#123;/client_id&#125;\", \"authorizations_url\": \"https://api.github.com/authorizations\", \"code_search_url\": \"https://api.github.com/search/code?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\", \"commit_search_url\": \"https://api.github.com/search/commits?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\", \"emails_url\": \"https://api.github.com/user/emails\", \"emojis_url\": \"https://api.github.com/emojis\", \"events_url\": \"https://api.github.com/events\", \"feeds_url\": \"https://api.github.com/feeds\", \"followers_url\": \"https://api.github.com/user/followers\", \"following_url\": \"https://api.github.com/user/following&#123;/target&#125;\", \"gists_url\": \"https://api.github.com/gists&#123;/gist_id&#125;\", \"hub_url\": \"https://api.github.com/hub\", \"issue_search_url\": \"https://api.github.com/search/issues?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\", \"issues_url\": \"https://api.github.com/issues\", \"keys_url\": \"https://api.github.com/user/keys\", \"label_search_url\": \"https://api.github.com/search/labels?q=&#123;query&#125;&amp;repository_id=&#123;repository_id&#125;&#123;&amp;page,per_page&#125;\", \"notifications_url\": \"https://api.github.com/notifications\", \"organization_repositories_url\": \"https://api.github.com/orgs/&#123;org&#125;/repos&#123;?type,page,per_page,sort&#125;\", \"organization_url\": \"https://api.github.com/orgs/&#123;org&#125;\", \"public_gists_url\": \"https://api.github.com/gists/public\", \"rate_limit_url\": \"https://api.github.com/rate_limit\", \"repository_url\": \"https://api.github.com/repos/&#123;owner&#125;/&#123;repo&#125;\", \"repository_search_url\": \"https://api.github.com/search/repositories?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\", \"current_user_repositories_url\": \"https://api.github.com/user/repos&#123;?type,page,per_page,sort&#125;\", \"starred_url\": \"https://api.github.com/user/starred&#123;/owner&#125;&#123;/repo&#125;\", \"starred_gists_url\": \"https://api.github.com/gists/starred\", \"team_url\": \"https://api.github.com/teams\", \"user_url\": \"https://api.github.com/users/&#123;user&#125;\", \"user_organizations_url\": \"https://api.github.com/user/orgs\", \"user_repositories_url\": \"https://api.github.com/users/&#123;user&#125;/repos&#123;?type,page,per_page,sort&#125;\", \"user_search_url\": \"https://api.github.com/search/users?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;\"&#125; 上述是GitHub API的显示 curl 在我的学习过程中听过很多次,此为第一次实践,不自觉有点兴奋. 响应中有很多包含指向符数信心的URL URL中也包含参数,相应的格式为JSON 尝试一言的API1curl https://v1.hitokoto.cn/ 返回信息 12345678&#123; \"id\": 4627, \"hitokoto\": \"漂亮姑娘千千万，功名万里惟一人！\", \"type\": \"e\", \"from\": \"春风词\", \"creator\": \"Sariay\", \"created_at\": \"1567970414\"&#125; JSON格式json 是一种轻量级的数据交换格式,与XML YAML相争 JSON 只支持双引号,不支持双引号 JSON优势 易于阅读(人类阅读) 只需要小规模修改便可以在JavaScript中使用 在命令行解析JSON工具介绍 jq(通过管道 | 把JSON传给jq后,可以使用过滤器轻易提取JSON片段) 下载安装jq网址: https://stedolan.github.io/jq/download/ 哭了,官方介绍中没有CentOS,此次试试直接下载安装(虽然我觉得也有yum 的package) From source on Linux, OS X, Cygwin, and other POSIX-like operating systems123456git clone https://github.com/stedolan/jq.gitcd jqautoreconf -i./configure --disable-maintainer-modemakesudo make install 这个要有相应的依赖To build it from a git clone, you’ll need to install a few packages first: GCC Make Autotools 有点麻烦,直接用yum install 解决了 &gt; **yum intall 真香**解析使用管道实现 1curl https://api.github.com | jq '.current_user_url' 12345[root@VM_14_21_centos jq]# curl https://api.github.com | jq '.current_user_url' % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed100 2283 100 2283 0 0 2950 0 --:--:-- --:--:-- --:--:-- 2949\"https://api.github.com/user\" 上述中将传输信息打印出来了curl -s 采用静默传输 不打印 传输信息demo 1curl -s https://api.github.com/users/tcpgnl 显示的是GitHub的个人信息 123456789101112131415161718192021222324252627282930313233&#123; \"login\": \"TCPGNL\", \"id\": 51265740, \"node_id\": \"MDQ6VXNlcjUxMjY1NzQw\", \"avatar_url\": \"https://avatars3.githubusercontent.com/u/51265740?v=4\", \"gravatar_id\": \"\", \"url\": \"https://api.github.com/users/TCPGNL\", \"html_url\": \"https://github.com/TCPGNL\", \"followers_url\": \"https://api.github.com/users/TCPGNL/followers\", \"following_url\": \"https://api.github.com/users/TCPGNL/following&#123;/other_user&#125;\", \"gists_url\": \"https://api.github.com/users/TCPGNL/gists&#123;/gist_id&#125;\", \"starred_url\": \"https://api.github.com/users/TCPGNL/starred&#123;/owner&#125;&#123;/repo&#125;\", \"subscriptions_url\": \"https://api.github.com/users/TCPGNL/subscriptions\", \"organizations_url\": \"https://api.github.com/users/TCPGNL/orgs\", \"repos_url\": \"https://api.github.com/users/TCPGNL/repos\", \"events_url\": \"https://api.github.com/users/TCPGNL/events&#123;/privacy&#125;\", \"received_events_url\": \"https://api.github.com/users/TCPGNL/received_events\", \"type\": \"User\", \"site_admin\": false, \"name\": \"TCPGNL\", \"company\": null, \"blog\": \"https://www.TCPGNL.COM\", \"location\": null, \"email\": null, \"hireable\": null, \"bio\": null, \"public_repos\": 7, \"public_gists\": 0, \"followers\": 0, \"following\": 3, \"created_at\": \"2019-06-01T13:30:51Z\", \"updated_at\": \"2020-01-03T04:56:02Z\"&#125; 可以显示我的所有GitHub的信息使用jq 获取我的网站信息 1curl -s https://api.github.com/users/tcpgnl | jq \".blog\" 由此显示BLOG curl调试参数 -i 请求打印头部 -v 请求打印请求和相应头部(&gt;后接请求数据 &lt;后接响应数据&gt; 重要Tag jq 不可以解析头部,注意 在请求头部有相应的API的请求限制的信息 12X-RateLimit-Limit: 60X-RateLimit-Remaining: 58 curl 身份验证命令 1curl -u 参数 网站","categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.tcpgnl.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"API","slug":"API","permalink":"https://www.tcpgnl.com/tags/API/"},{"name":"cURL","slug":"cURL","permalink":"https://www.tcpgnl.com/tags/cURL/"}]},{"title":"2020前行计划","slug":"plan-2020","date":"2019-12-31T23:11:39.000Z","updated":"2020-04-03T16:52:09.155Z","comments":true,"path":"plan-2020.html","link":"","permalink":"https://www.tcpgnl.com/plan-2020.html","excerpt":"","text":"2020年开始了,立下FLAG,希望会拥有FLAG! 总体规划 拥有一个看得到的未来,拥有确定的方向. 减少时间的浪费,不可将19年的错误带到20年. 改变拖延,计划先行. 立计划 拥有一件能让自己高兴的事情 拿到自己人生的第一桶金. 毕业设计拿到优. 学会一种新的编程语言,并做出一个项目. 拥有一个自己的开源项目,并取得一定的成果(50 star以上). 看12本学习以外的书籍(6本计算机,6本其他书籍). 微信公众号粉丝过千,CSDN进入前一万名,拿到博客专家. 20开篇语上述计划只是多种计划的开篇词,希望在2020年,可以持续进步,迈向更远的远方,加油未来,加油TCPGNL!","categories":[{"name":"年度计划","slug":"年度计划","permalink":"https://www.tcpgnl.com/categories/%E5%B9%B4%E5%BA%A6%E8%AE%A1%E5%88%92/"}],"tags":[]},{"title":"回顾2019","slug":"review-2019","date":"2019-12-31T11:03:55.000Z","updated":"2020-04-03T16:27:01.259Z","comments":true,"path":"review-2019.html","link":"","permalink":"https://www.tcpgnl.com/review-2019.html","excerpt":"","text":"2019感想: 转眼间秋去冬来,时光荏苒,2019年已经过去,这一年有过多的感想与感思,打算在这最后一天好好总结一下,同时也为新年做准备. 2019年最后一天的网页 回顾所得这一年(2019)已经过去, 向很多的人请教了很多问题(未来道路,人生,事务权衡),收获了很多新的认知. 这一年确定了自己的奋斗与目标(TCPGNL),使得自己的未来更加的清晰. 第一次将读书付诸于实践,完完全全的读完了一本书(未来世界的幸存者),看到了前辈们的远见和深思. 事情要提前做好,专注于待办任务,深刻的分析自身的能力,划定清晰的计划. 生产力可以适当借助外力提升,不要过于死板. 要提前提升自己的实力,在机会到来之前拥有抓住机会的能力. 认真对待当下,对于自己该拥有的事物,要牢牢抓住. 博学,专注,深思,知行合一. 所失 放弃了过多本应该拥有的东西,或因为实力不够,或因为规划不好. 将很多时间放在没有意义的事情上,浪费了过多的时间. 对于一些事情的态度不坚决,导致很多事情浪费过多的时间和精力. 事情做的不专注,导致同步事项两者出现了均不完美. 提前高估了事情的难度,导致拖延现象严重. 做事保持了太多的逢迎,造成时间和精力的浪费. 计划分割的不是很具体,且实现的进程出现问题,造成有些计划没有完成.总结 这一年是确定计划的一年,这一年也是认清自我的一年,这一年可以说过的很艰辛,放弃了很多本应该不能放弃的东西,浪费了很多不该浪费的时间,在不应该花时间的地方花费了太多时间,逢迎浪费了太多的时间,浪费了太多的精力,而且这种浪费造成的是一无所得.在沉思之后,也有让自己所得的东西,对待当下要认真,要提前做好规划,提出待办事项,制定清晰的计划,认真的读完每本好书,对当下的事情要认识深刻,保持敏锐的观察力和深刻的见解,专注于right thing.提升实力,知行合一.对新年的寄语: 认定对的事情就要去做, 不要考虑什么数字等无用的东西, 专注于正在做的事情, 将事情做成成品,有自己的最优解, 科学规划自己做的事情,将事项细分, 提高执行力,避免无效时间的浪费, Time,Time,Time,Plan,Plan,Plan,Act,Act,Act! 对坚信事物矢志不渝. 今年最高兴的一件事没,今年没有任何一件事情,能让我高兴. 今年最难过的一件事没有对目标尽全力. 年度关键词今年的年度关键词为 撰刻释义:今年的所有感知与感悟都已撰刻在历史的长河中,今年有或多或少的好和不好的事务都将消逝于历史,对于好的感知,要牢记深思,未来要多加强化,对于坏的感知,要坚决遗弃和反思,以后不可再出现.未来之光已经照亮,下一步,开启未来!","categories":[{"name":"年度报告","slug":"年度报告","permalink":"https://www.tcpgnl.com/categories/%E5%B9%B4%E5%BA%A6%E6%8A%A5%E5%91%8A/"},{"name":"感想","slug":"年度报告/感想","permalink":"https://www.tcpgnl.com/categories/%E5%B9%B4%E5%BA%A6%E6%8A%A5%E5%91%8A/%E6%84%9F%E6%83%B3/"}],"tags":[]},{"title":"Docker Windows 安装教程","slug":"docker-windows-install","date":"2019-12-27T16:31:23.000Z","updated":"2020-04-03T14:57:46.559Z","comments":true,"path":"docker-windows-install.html","link":"","permalink":"https://www.tcpgnl.com/docker-windows-install.html","excerpt":"","text":"Docker Windows 安装教程 最近想学习一下docker ,因此安装一下dockerWindows版本 前提 Windows 64 专业版 有合适的网络 (docker下载速度有点慢) docker账号一个(可以后申请) 首先打开Windows虚拟化 Hyper-V控制面板中寻找 程序 启动或关闭Windows功能勾选Hyper-V 下载文件下载过程中需要注册文件,记得注册 注册完成后出现下面的界面 重新启动 成功 docker desktop 重启额,需要在BIOS中支持虚拟化.. 解决方案输入如下指令 1bcdedit &#x2F;set hypervisorlaunchtype auto 重启 安装成功","categories":[{"name":"Docker","slug":"Docker","permalink":"https://www.tcpgnl.com/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://www.tcpgnl.com/tags/Docker/"}]},{"title":"SpringBoot HelloWorld 实现","slug":"springboot-helloworld","date":"2019-12-27T15:20:56.000Z","updated":"2020-04-03T16:27:23.097Z","comments":true,"path":"springboot-helloworld.html","link":"","permalink":"https://www.tcpgnl.com/springboot-helloworld.html","excerpt":"","text":"HelloWorld 程序实现加入依赖此处同第一步骤 当前阶段只需要加入 Java Web的依赖即可.pom.xml代码如下(idea 自动生成) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;groupId&gt;com.tcpgnl&lt;/groupId&gt; &lt;artifactId&gt;helloworld&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;name&gt;helloworld&lt;/name&gt; &lt;description&gt;HelloWorld project for Spring Boot&lt;/description&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt; &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 第二步 编写controller新建 HelloController.java 文件加入注解(Spring 特性)注解解释:@GetMapping(“/hello”) 是将HTTP GET 方法映射到方法上(映射到后面的方法上)HelloController.java代码如下: 123456789101112131415package com.tcpgnl.helloworld;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RestController;// 加入注解@RestControllerpublic class HelloController &#123; @GetMapping(\"/hello\") public String hello()&#123; return \"Hello World TCPGNL!\"; &#125;&#125; 运行程序:效果","categories":[{"name":"Java","slug":"Java","permalink":"https://www.tcpgnl.com/categories/Java/"},{"name":"SpringBoot","slug":"Java/SpringBoot","permalink":"https://www.tcpgnl.com/categories/Java/SpringBoot/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.tcpgnl.com/tags/Java/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://www.tcpgnl.com/tags/SpringBoot/"}]},{"title":"创建SpringBoot项目","slug":"springboot-init","date":"2019-12-27T10:41:30.000Z","updated":"2020-04-03T16:27:30.254Z","comments":true,"path":"springboot-init.html","link":"","permalink":"https://www.tcpgnl.com/springboot-init.html","excerpt":"","text":"创建SpringBoot项目 这是系列笔记的第一篇创建项目 博主网站:https://www.tcpgnl.com项目地址: https://github.com/TCPGNL/Springboot 创建项目 选择Spring Initializr 修改相应信息 选择初始化需要的依赖此处仅需要WEB-&gt;Spring-web 选择工程目录 运行显示效果在8080端口运行成功但是因为还没有设置相应的注解因此显示还不是那么好看,下一部分就可以显示了. 相应文件解析 congratulation 完成了下载完成后就可以使用了第一篇完成","categories":[{"name":"Java","slug":"Java","permalink":"https://www.tcpgnl.com/categories/Java/"},{"name":"SpringBoot","slug":"Java/SpringBoot","permalink":"https://www.tcpgnl.com/categories/Java/SpringBoot/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.tcpgnl.com/tags/Java/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://www.tcpgnl.com/tags/SpringBoot/"}]},{"title":"Spring Boot 学习目录","slug":"spring-boot-index","date":"2019-12-27T07:28:04.000Z","updated":"2020-04-03T16:27:08.849Z","comments":true,"path":"spring-boot-index.html","link":"","permalink":"https://www.tcpgnl.com/spring-boot-index.html","excerpt":"","text":"Springboot JAVA Spring Boot 学习路径+记录 咱也开始学习,Spring Boot了,这是学习的目录,记忆一下自己的学习过程,欢迎小伙伴一起来学习,最好能共同讨论哦. 项目开始时间:2019-12-27最后更新时间:2019-12-27是否更新完成:否 项目配置: Windows/Linux/Mac 电脑一台 idea IDE 一个 TCPGNL 一个(哭) JDK 1.8 博主网站:https://www.tcpgnl.com项目地址: https://github.com/TCPGNL/Springboot 序号 简介 开始时间 结束时间 项目说明 1 创建项目 2019-12-27 2019-12-27 初始化 2 打印HelloWorld! 2019-12-27 2019-12-27 创建controler 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20","categories":[{"name":"Java","slug":"Java","permalink":"https://www.tcpgnl.com/categories/Java/"},{"name":"SpringBoot","slug":"Java/SpringBoot","permalink":"https://www.tcpgnl.com/categories/Java/SpringBoot/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.tcpgnl.com/tags/Java/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://www.tcpgnl.com/tags/SpringBoot/"}]},{"title":"从零到一搭建telegram Rss机器人","slug":"start-tg-rss-bot","date":"2019-12-26T01:23:37.000Z","updated":"2020-04-03T14:55:24.077Z","comments":true,"path":"start-tg-rss-bot.html","link":"","permalink":"https://www.tcpgnl.com/start-tg-rss-bot.html","excerpt":"","text":"从零到一搭建telegram Rss机器人 看到人家都有自己的机器人,咱也想有一个机器人.在此处记录下搭建RSS bot 的步骤. 近期刚好有一个aws 的lightsail服务器,学习一下如何搭建一个rss机器人,同时也学习一下telegram的开发文档. 搭建需求 外网服务器一台 telegram账号一个 电脑一台 TCPGNL一个(哭) 搭建步骤首先申请RSS机器人 在TG中搜索botfather 发送/newbot 指令 输入给机器人命名的名字 获取HTTP API token(第一次用 呜呜呜) 图片如下 注意不要保护好自己的API token.(画线处即为API token) 第二步 搭建RSS机器人本文采用的是开源的rssbot https://github.com/iovxw/rssbot 命令如下 (第三行为API token 注意替换为自己的) 如果长期指令的话替换掉第三条指令 123wget https://github.com/iovxw/rssbot/releases/download/v1.4.4/rssbot-v1.4.4-linux.zipunzip rssbot-v1.4.4-linux.zip ./rssbot DATAFILE TELEGRAM-BOT-TOKEN 第三条指令替换为 1nohup ./rssbot DATAFILE TELEGRAM-BOT-TOKEN &gt; /dev/null 2&gt;&amp;1 &amp; 第一行指令需要wget命令,注意安装(CentOS),第二条我也没有(额) 12yum install wgetyum install unzip 订阅网站命令12345/rss - 显示当前订阅的 RSS 列表，加 raw 参数显示链接/sub - 订阅一个 RSS: /sub http://example.com/feed.xml/unsub - 退订一个 RSS: /unsub http://example.com/feed.xml/unsubthis - 使用此命令回复想要退订的 RSS 消息即可退订, 不支持 Channel/export - 导出为 OPML 个人订阅订阅我自己的网站 1&#x2F;sub https:&#x2F;&#x2F;www.tcpgnl.com&#x2F;feed&#x2F; 频道订阅/交流群订阅添加机器人: 授权: 指令命令 12/sub @TCPGNLchannel https://www.tcpgnl.com/feed//sub @频道名称 订阅网址 图片如下: 效果 交流频道/群欢迎一起来聊啊 telegram 频道 : https://t.me/TCPGNLchannel telegram 群: https://t.me/tcpgnls","categories":[{"name":"代码","slug":"代码","permalink":"https://www.tcpgnl.com/categories/%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"telegram","slug":"telegram","permalink":"https://www.tcpgnl.com/tags/telegram/"}]},{"title":"代码训练网址","slug":"code-web","date":"2019-09-15T00:00:35.000Z","updated":"2020-04-03T14:53:59.430Z","comments":true,"path":"code-web.html","link":"","permalink":"https://www.tcpgnl.com/code-web.html","excerpt":"","text":"原文地址:https://www.tcpgnl.com/ 训练代码网站,以后刷题使用 google code jam leetocde codeforce newcoder pat voj 训练代码的书籍 剑指offer 程序员面试宝典","categories":[{"name":"索引","slug":"索引","permalink":"https://www.tcpgnl.com/categories/%E7%B4%A2%E5%BC%95/"}],"tags":[]},{"title":"CSP 题目索引--备战1909CSP","slug":"csp-list","date":"2019-09-10T05:54:28.000Z","updated":"2020-04-03T14:52:49.233Z","comments":true,"path":"csp-list.html","link":"","permalink":"https://www.tcpgnl.com/csp-list.html","excerpt":"","text":"首发地址:https://tcpgnl.com/csp-list.html 试题清单 试题编号 试题名称 最高得分 查看我的提交 操作 代码 题目类型 题目大意 201903-1 小中大 100 查看我的提交 查看试题/答题 查看 简单模拟 有序数据总找到最大的最小的数据和中间的数据(中间数据四舍五入,保留一位小数) 201903-2 二十四点 100 查看我的提交 查看试题/答题 查看 字符串+栈 利用栈进行+运算 -变成+ */ 直接计算 201903-3 损坏的RAID5 查看我的提交 查看试题/答题 查看 201903-4 消息传递接口 查看我的提交 查看试题/答题 查看 201903-5 317号子任务 查看我的提交 查看试题/答题 查看 201812-5 管道清洁 查看我的提交 查看试题/答题 查看 201812-4 数据中心 查看我的提交 查看试题/答题 查看 201812-3 CIDR合并 查看我的提交 查看试题/答题 查看 201812-2 小明放学 查看我的提交 查看试题/答题 查看 201812-1 小明上学 100 查看我的提交 查看试题/答题 查看 简单模拟 红绿灯的时间的计算+路程的时间 201809-1 卖菜 100 查看我的提交 查看试题/答题 查看 简单模拟 简单的对于两个数据的相加 201809-2 买菜 查看我的提交 查看试题/答题 查看 201809-3 元素选择器 查看我的提交 查看试题/答题 查看 201809-4 再卖菜 查看我的提交 查看试题/答题 查看 201809-5 线性递推式 查看我的提交 查看试题/答题 查看 201803-1 跳一跳 100 查看我的提交 查看试题/答题 查看 简单模拟 记录连续跳到中心的数据的 201803-2 碰撞的小球 查看我的提交 查看试题/答题 查看 201803-3 URL映射 查看我的提交 查看试题/答题 查看 201803-4 棋局评估 查看我的提交 查看试题/答题 查看 201803-5 二次求和 查看我的提交 查看试题/答题 查看 201712-1 最小差值 100 查看我的提交 查看试题/答题 查看 简单模拟 这个也是简单的进行模拟 201712-2 游戏 0 查看我的提交 查看试题/答题 查看 201712-3 Crontab 查看我的提交 查看试题/答题 查看 201712-4 行车路线 查看我的提交 查看试题/答题 查看 201712-5 商路 查看我的提交 查看试题/答题 查看 201709-1 打酱油 100 查看我的提交 查看试题/答题 查看 简单模拟 简单的模拟 201709-2 公共钥匙盒 查看我的提交 查看试题/答题 查看 201709-3 JSON查询 查看我的提交 查看试题/答题 查看 201709-4 通信网络 查看我的提交 查看试题/答题 查看 201709-5 除法 查看我的提交 查看试题/答题 查看 201703-1 分蛋糕 100 查看我的提交 查看试题/答题 查看 简单模拟 简单的模拟 201703-2 学生排队 查看我的提交 查看试题/答题 查看 201703-3 Markdown 查看我的提交 查看试题/答题 查看 201703-4 地铁修建 查看我的提交 查看试题/答题 查看 201703-5 引水入城 查看我的提交 查看试题/答题 查看 201612-1 中间数 100 查看我的提交 查看试题/答题 查看 简单模拟 左右两边数据的个数相同,而且中间数据会出现重复(去重和中间数据的判定) 201612-2 工资计算 查看我的提交 查看试题/答题 查看 201612-3 权限查询 查看我的提交 查看试题/答题 查看 201612-4 压缩编码 查看我的提交 查看试题/答题 查看 201612-5 卡牌游戏 查看我的提交 查看试题/答题 查看 201609-1 最大波动 100 查看我的提交 查看试题/答题 查看 简单模拟 简单模拟 201609-2 火车购票 查看我的提交 查看试题/答题 查看 201609-3 炉石传说 查看我的提交 查看试题/答题 查看 201609-4 交通规划 查看我的提交 查看试题/答题 查看 201609-5 祭坛 查看我的提交 查看试题/答题 查看 201604-1 折点计数 100 查看我的提交 查看试题/答题 查看 简单模拟 简单模拟 201604-2 俄罗斯方块 查看我的提交 查看试题/答题 查看 201604-3 路径解析 查看我的提交 查看试题/答题 查看 201604-4 游戏 查看我的提交 查看试题/答题 查看 201604-5 网络连接 查看我的提交 查看试题/答题 查看 201512-1 数位之和 100 查看我的提交 查看试题/答题 查看 简单模拟 简单模拟 201512-2 消除类游戏 查看我的提交 查看试题/答题 查看 201512-3 画图 查看我的提交 查看试题/答题 查看 201512-4 送货 查看我的提交 查看试题/答题 查看 201512-5 矩阵 查看我的提交 查看试题/答题 查看 201509-1 数列分段 100 查看我的提交 查看试题/答题 查看 简单模拟 数据拆分 201509-2 日期计算 查看我的提交 查看试题/答题 查看 201509-3 模板生成系统 查看我的提交 查看试题/答题 查看 201509-4 高速公路 查看我的提交 查看试题/答题 查看 201509-5 最佳文章 查看我的提交 查看试题/答题 查看 201503-1 图像旋转 100 查看我的提交 查看试题/答题 查看 简单模拟 注意旋转前和旋转后的区别和练习 201503-2 数字排序 查看我的提交 查看试题/答题 查看 201503-3 节日 查看我的提交 查看试题/答题 查看 201503-4 网络延时 查看我的提交 查看试题/答题 查看 201503-5 最小花费 查看我的提交 查看试题/答题 查看 201412-1 门禁系统 100 查看我的提交 查看试题/答题 查看 简单模拟 简单的模拟数据 201412-2 Z字形扫描 查看我的提交 查看试题/答题 查看 简单模拟 201412-3 集合竞价 查看我的提交 查看试题/答题 查看 201412-4 最优灌溉 查看我的提交 查看试题/答题 查看 201412-5 货物调度 查看我的提交 查看试题/答题 查看 201409-1 相邻数对 100 查看我的提交 查看试题/答题 查看 简单模拟 这个也是简单数据 201409-2 画图 100 查看我的提交 查看试题/答题 查看 简单模拟 求面积的计算一个一个各自的累计 201409-3 字符串匹配 100 查看我的提交 查看试题/答题 查看 字符串 字符串的模拟 201409-4 最优配餐 查看我的提交 查看试题/答题 查看 201409-5 拼图 查看我的提交 查看试题/答题 查看 201403-1 相反数 100 查看我的提交 查看试题/答题 查看 简单模拟 这个问题是简单模拟,找出有多少对有相反数据的数据 201403-2 窗口 查看我的提交 查看试题/答题 查看 201403-3 命令行选项 查看我的提交 查看试题/答题 查看 201403-4 无线网络 查看我的提交 查看试题/答题 查看 201403-5 任务调度 查看我的提交 查看试题/答题 查看 201312-1 出现次数最多的数 100 查看我的提交 查看试题/答题 查看 简单模拟 这个简单,只需要输出相应的数据的最小的数值即可 201312-2 ISBN号码 90 查看我的提交 查看试题/答题 查看 字符串 这个问题是一个简单的字符串的匹配和数据的校验 201312-3 最大的矩形 100 查看我的提交 查看试题/答题 查看 简单模拟 这个问题也是一个简单的数据的模拟,找到其中最大的图形 201312-4 有趣的数 查看我的提交 查看试题/答题 查看 201312-5 I’m stuck! 查看我的提交 查看试题/答题 查看","categories":[{"name":"代码","slug":"代码","permalink":"https://www.tcpgnl.com/categories/%E4%BB%A3%E7%A0%81/"}],"tags":[]},{"title":"向世界问好!","slug":"say-new-to-world","date":"2019-09-10T01:00:15.000Z","updated":"2020-04-03T16:17:46.357Z","comments":true,"path":"say-new-to-world.html","link":"","permalink":"https://www.tcpgnl.com/say-new-to-world.html","excerpt":"","text":"前言转眼间,已经到了第五年末尾和第六年年初,在这关键的节点中开通此博客,一是庆祝这个纪念日,二是勉励自己更加努力的奋斗.加油现在,加油未来!","categories":[{"name":"感想","slug":"感想","permalink":"https://www.tcpgnl.com/categories/%E6%84%9F%E6%83%B3/"}],"tags":[]}],"categories":[{"name":"未分类","slug":"未分类","permalink":"https://www.tcpgnl.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"},{"name":"Java","slug":"Java","permalink":"https://www.tcpgnl.com/categories/Java/"},{"name":"SpringBoot","slug":"Java/SpringBoot","permalink":"https://www.tcpgnl.com/categories/Java/SpringBoot/"},{"name":"感想","slug":"感想","permalink":"https://www.tcpgnl.com/categories/%E6%84%9F%E6%83%B3/"},{"name":"Docker","slug":"Docker","permalink":"https://www.tcpgnl.com/categories/Docker/"},{"name":"未分类","slug":"Java/SpringBoot/未分类","permalink":"https://www.tcpgnl.com/categories/Java/SpringBoot/%E6%9C%AA%E5%88%86%E7%B1%BB/"},{"name":"索引","slug":"索引","permalink":"https://www.tcpgnl.com/categories/%E7%B4%A2%E5%BC%95/"},{"name":"Java","slug":"Docker/Java","permalink":"https://www.tcpgnl.com/categories/Docker/Java/"},{"name":"SpringBoot","slug":"Docker/Java/SpringBoot","permalink":"https://www.tcpgnl.com/categories/Docker/Java/SpringBoot/"},{"name":"年度计划","slug":"年度计划","permalink":"https://www.tcpgnl.com/categories/%E5%B9%B4%E5%BA%A6%E8%AE%A1%E5%88%92/"},{"name":"年度报告","slug":"年度报告","permalink":"https://www.tcpgnl.com/categories/%E5%B9%B4%E5%BA%A6%E6%8A%A5%E5%91%8A/"},{"name":"感想","slug":"年度报告/感想","permalink":"https://www.tcpgnl.com/categories/%E5%B9%B4%E5%BA%A6%E6%8A%A5%E5%91%8A/%E6%84%9F%E6%83%B3/"},{"name":"代码","slug":"代码","permalink":"https://www.tcpgnl.com/categories/%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://www.tcpgnl.com/tags/Java/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://www.tcpgnl.com/tags/SpringBoot/"},{"name":"Spring","slug":"Spring","permalink":"https://www.tcpgnl.com/tags/Spring/"},{"name":"JPA","slug":"JPA","permalink":"https://www.tcpgnl.com/tags/JPA/"},{"name":"Bitnami","slug":"Bitnami","permalink":"https://www.tcpgnl.com/tags/Bitnami/"},{"name":"Docker","slug":"Docker","permalink":"https://www.tcpgnl.com/tags/Docker/"},{"name":"博客","slug":"博客","permalink":"https://www.tcpgnl.com/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"Docker,Java,SpringBoot","slug":"Docker-Java-SpringBoot","permalink":"https://www.tcpgnl.com/tags/Docker-Java-SpringBoot/"},{"name":"API","slug":"API","permalink":"https://www.tcpgnl.com/tags/API/"},{"name":"cURL","slug":"cURL","permalink":"https://www.tcpgnl.com/tags/cURL/"},{"name":"telegram","slug":"telegram","permalink":"https://www.tcpgnl.com/tags/telegram/"}]}